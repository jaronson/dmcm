#!/usr/bin/env bash
set -u

pushd `dirname $0` > /dev/null

DMCM_SCRIPTPATH=`pwd -P`
DMCM_SERVICE_DIR="/services"
DMCM_BASE_DIR="/opt/dmcm-base"

INIT_DIR="/etc/init.d"
GETOPT="/usr/bin/getopt"
SED="/bin/sed"

dmcm_tokens=
dmcm_flag_debug=0
dmcm_flag_interactive=0

for file in `ls -d $DMCM_SCRIPTPATH/{actions,functions}/*`; do
  source $file
done

#source "$DMCM_SCRIPTPATH/functions/logging"
#source "$DMCM_SCRIPTPATH/actions/service"
#source "$DMCM_SCRIPTPATH/actions/get"
#source "$DMCM_SCRIPTPATH/actions/logs"

function dmcm_help(){
  local args=$(echo $* | $SED "s/.*--\(.*\)/\1/g" | tr -d "'")

  [[ "$args" = "" ]] && dmcm_usage && return

  local f="$DMCM_SCRIPTPATH/help/$(echo $args | cut -d' ' -f2).md"

  if [ -e $f ]; then
    printf "$(cat $f)" "$(echo $(dmcm_get_services) | $SED "s/ /, /g")"
    printf "\n"
  else
    dmcm_usage
  fi
}

function dmcm_usage(){
  dmcm_out "$(cat << EOF
Usage: dmcm [options] <action> <service> [resource]

Available services:
$(dmcm_format_rows $(dmcm_get_services))

Available resources:
$(dmcm_format_rows $(dmcm_get_resources))

Available actions:
$(dmcm_format_rows $(dmcm_get_actions))
EOF
)"
}

function dmcm_run_sentence(){
  [[ "$#" -eq 0 ]] && dmcm_error "No action was given." && return 1

  local action=$1
  shift

  local func=

  if [[ "$#" -lt 2 ]]; then
    func="dmcm_$action"
  else
    func="dmcm_${action}_${2}"
  fi

  dmcm_debug "generated function: $func"

  type $func > /dev/null 2>&1

  if [[ $? -ne 0 ]]; then
    dmcm_error "I don't know how to '$dmcm_tokens'."
    return 1
  else
    $func $action $@
  fi
}

function dmcm_parse_sentence(){
  local tokens=$*
  local count=1
  local arg=

  local service=
  local action=
  local resource=
  local value=

  echo $(dmcm_get_actions) | grep -i -w "$1" > /dev/null

  if [[ $? -eq "0" ]]; then
    action=$1
    shift
  else
    dmcm_error "Unknown action '$1'."
    return 1
  fi

  if [[ $# -eq "0" ]]; then
    service=$(dmcm_get_services)
  elif [[ "$1" = "all" ]]; then
    service=$(dmcm_get_services)
    shift
  else
    for arg in $*; do
      echo "$(dmcm_get_services)" | grep -i -w "$arg" > /dev/null

      if [[ $? -eq "0" ]]; then
        service="$service $arg"
        shift
      else
        break
      fi
    done
  fi

  if [ "$#" -gt "0" ]; then
    local res

    if [ "$#" -gt "1" ] && [[ $(echo $2 | tr -d ' ') = "=" || $(echo $2 | tr -d ' ') = "to" ]]; then
      res=$1
      value=$3
    else
      local kv=$(echo $1 | $SED "s/ to /=/g" | tr -d ' ')
      if [[ "$(echo $kv | wc -w)" = "2" ]]; then
        res=$(echo $kv | cut -d'=' -f1)
        value=$(echo $kv | cut -d'=' -f2)
      else
        res=$kv
      fi
    fi

    for r in $(dmcm_get_resources); do
      [[ ${res} = $r ]] && resource=$res && break
    done

    [[ -z $resource ]] && [[ $res = "log" ]] && resource=logs
    [[ -z $resource ]] && dmcm_error "Unknown resource '$res'." && return 1
  fi

  action=$(echo $action | xargs)
  service=$(for s in `echo $service`; do echo $s; done | xargs)
  resource=$(echo $resource | xargs)

  [[ -z $action ]] && dmcm_error "Action and/or service is missing." && return 1
  [[ -z $service ]] && service=$(dmcm_get_services)

  service=$(echo $service | tr ' ' ',')

  dmcm_debug "action: $action"
  dmcm_debug "service: $service"
  dmcm_debug "resource: $resource"
  dmcm_debug "value: $value"

  echo "$action $service $resource $value"
}

function dmcm(){
  [[ $# -eq "0" ]] && dmcm_help && return 1
  [[ "$1" = "help" ]] && dmcm_help $@ && return 0

  local flag=
  local switchflag=0
  local tokens=
  local sentence=

  local args=`${GETOPT} -o hid -l "help,interactive" -n "dmcm" -- "$@"`

  for arg in $args; do
    if [ "$arg" = "--" ]; then
      switchflag=1
    elif [ $switchflag -eq 1 ]; then
      tokens="$tokens $arg"
    else
      case $arg in
      -h|--help)
        dmcm_help $args
        return 0
        ;;
      -i|--interactive)
        dmcm_flag_interactive=1
        ;;
      -d|--debug)
        dmcm_flag_debug=1
        ;;
      \?)
        dmcm_help $args
        return 1
        ;;
      esac
    fi

    flag=$arg
  done

  tokens=$(echo $tokens | $SED "s/'//g")

  dmcm_debug "tokens: $tokens"

  sentence=$(dmcm_parse_sentence $tokens)

  [[ $? -ne "0" ]] && return

  dmcm_tokens="$tokens"
  dmcm_run_sentence $sentence
}

dmcm $@
