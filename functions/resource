#!/usr/bin/env bash
function dmcm_run_action_on_resource(){
  local resource=
  local func=

  [[ -z $dmcm_resource ]] && dmcm_resource="logs"

  for resource in $dmcm_resource; do
    case $resource in
    logs|runlogs|servicelogs)
      dmcm_run_action_on_logs $resource
      ;;
    *)
      func=$(dmcm_get_function $dmcm_action $dmcm_resource)
      type $func > /dev/null 2>&1

      if [[ $? -ne 0 ]]; then
        dmcm_error "I don't know how to '$dmcm_tokens'."
        return 1
      else
        $func "$dmcm_service"
      fi
      ;;
    esac
  done
}

function dmcm_run_action_on_logs(){
  local logtype=$1
  local role=
  local logname=
  local loglist=
  local addlog=1

  for service in $dmcm_service; do
    if [[ "$logtype" = "runlogs" ]]; then
      role=$service
      logname=$service
    else
      case $service in
      assign)
        role=monitor
        logname=$service
        ;;
      publisher|subscriber)
        role=worker
        logname="pubsub"
        ;;
      worker)
        role=worker
        logname=$service
        ;;
      *)
        role=$service
        logname=$service
        ;;
      esac
    fi

    if [[ "$dmcm_action" = "rm" ]]; then
      if [[ -z `dmcm status $service | grep '^down'` ]]; then
        dmcm_out "You must stop $service first."
        addlog=0
      fi
    fi

    if [[ $addlog -eq 1 ]]; then
      local lf
      case $logtype in
      runlogs)
        lf="${DMCM_BASE_DIR}/sv/dmcm-${role}/log/main/current"
        ;;
      *)
        lf="${DMCM_SERVICE_DIR}/$role/logs/${logname}.log"
      esac

      loglist="$loglist $lf"
    fi
  done

  dmcm_debug "loglist: $loglist"

  local func=`dmcm_get_function $dmcm_action "logs"`

  type $func > /dev/null 2>&1

  if [[ $? -eq "0" ]]; then
    $func $loglist
    return 0
  else
    dmcm_error "I don't know how to '$dmcm_tokens'."
    return 1
  fi
}

function dmcm_clear_logs(){
  for file in "$*"; do
    [[ -e $file ]] && > $file && dmcm_out "Truncated $file." || dmcm_out "Unable to truncate $file."
  done
}

function dmcm_page_logs(){
  less $*
}

function dmcm_rm_logs(){
  for file in "$*"; do
    if [[ -e $file ]]; then
      rm -f $file && dmcm_out "removed $file" || dmcm_out "Unable to remove $file."
    else
      dmcm_out "No such file $file."
    fi
  done
}

function dmcm_tail_logs(){
  echo $* | xargs tail -n200 -f
}

function dmcm_view_logs(){
  which vim > /dev/null

  if [[ $? -eq "0" ]]; then
    vim -O $*
  else
    view $*
  fi
}

function dmcm_get_credentials(){
  local sv=
  local f=
  local buf=
  local b=
  local host_db=
  local user=
  local pass=
  local fmt='"%-10s %-20s %-14s %s\n", $1, $2, $3, $4'

  echo "HOST DATABASE USER PASS" | awk "{ printf $fmt }"

  for f in \
    "${DMCM_SERVICE_DIR}/worker/resources/worker.properties"\
    "${DMCM_SERVICE_DIR}/monitor/resources/cloud.properties";
    do
    buf=$(grep -e '^[a-z.]\+url=.*' $f)

    for b in $buf; do
      host_db=$(echo $b | egrep -o 'mysql:.*\?' | sed "s/?//g" | tr '/' ' ' | awk '{ print $2, $3 }')
      user=$(echo $b | egrep -o 'user=.*&' | sed "s/user=\(.*\)&/\1/g")
      pass=$(echo $b | egrep -o 'password=.*&?' | sed "s/password=\(.*\)&\?/\1/g")

      echo $host_db $user $pass | awk "{ printf $fmt }"
    done
  done

  for sv in dispatcher console api km; do
    f="${DMCM_SERVICE_DIR}/$sv/contexts/enstratus-context.xml"

    while read l; do
      [[ "$l" =~ "username" ]] && user=$(echo $l | egrep -o '>.*<' | sed "s/<\|>//g")
      [[ "$l" =~ "password" ]] && pass=$(echo $l | egrep -o '>.*<' | sed "s/<\|>//g")
      [[ "$l" =~ "url" ]] && host_db=$(echo $l | egrep -o 'mysql:.*\?' | sed "s/?//g" | tr '/' ' ' | awk '{ print $2, $3 }')
    done < $f

    echo $host_db $user $pass | awk "{ printf $fmt }"
  done
}

function dmcm_get_pid(){
  dmcm_run_action_on_service 'status' "$1" | tail -n+2 | awk '{ print $3 }' | xargs
}

function dmcm_get_memusage(){
  local types=("Rss" "Shared" "Private" "Swap" "Pss")
  local fmt='"%-20s %-10s %-10s %-10s %-10s %-10s %-10s\n", $1, $2, $3, $4, $5, $6, $7'

  echo "Service ${types[@]} Total" | tr '[a-z]' '[A-Z]' | awk "{ printf $fmt }"

  for sv in $dmcm_service; do
    local pid=$(dmcm_get_pid $sv)
    local usage=
    local stotal=

    for type in "${types[@]}"; do
      local u=$(cat /proc/$pid/smaps | grep $type | awk '{ print $2 }' | xargs | tr ' ' '+' | bc)
      u="$(echo "$u / 1024" | bc)"
      usage="$usage ${u}"
    done

    stotal=$(echo $usage | tr ' ' '+' | bc)

    echo "dmcm-$sv $usage $stotal" | awk "{ printf $fmt }"
  done
}
